/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import com.sun.corba.se.impl.orbutil.graph.Graph;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import source.*;

/**
 *
 * @author User
 */
public class SuggestionWindow extends javax.swing.JFrame {

    /**
     * Creates new form SuggestionWindow
     */
    
    static int numberOfQuestions = 6;
     ArrayList<String> questions = new ArrayList();
     ArrayList<String> jRadioButton1Text = new ArrayList();
     ArrayList<String> jRadioButton2Text = new ArrayList();
     ArrayList<String> jRadioButton3Text = new ArrayList();
     ArrayList<String> jRadioButton4Text = new ArrayList();
     
     int count = 1;
     int score = 0;

    
    public SuggestionWindow() {
        initComponents();
        setLocationRelativeTo( null ); //to center the window
        jRadioButton3.setVisible(false);
        jRadioButton4.setVisible(false);
        
 
        // questions
        questions.add("What is your sex?"); // first question
        questions.add("What is your age?");
        questions.add("What is your education?");
        questions.add("What is your occupation?");
        questions.add("How many hours do you use computer in a day?");
        questions.add("What is your income (monthly in TL)?");
        
        // jRadioButton1Text
        jRadioButton1Text.add("Male");
        jRadioButton1Text.add("<18");
        jRadioButton1Text.add("Primary School");
        jRadioButton1Text.add("Student");
        jRadioButton1Text.add("<2");
        jRadioButton1Text.add("<1000");
        
        // jRadioButton2Text
        jRadioButton2Text.add("Female");
        jRadioButton2Text.add("18-26");
        jRadioButton2Text.add("High School");
        jRadioButton2Text.add("Officer");
        jRadioButton2Text.add("2-4");
        jRadioButton2Text.add("1000-2500");
        
        // jRadioButton3Text
        jRadioButton3Text.add("NULL");
        jRadioButton3Text.add("26-35");
        jRadioButton3Text.add("Collage");
        jRadioButton3Text.add("Engineer");
        jRadioButton3Text.add("4-6");
        jRadioButton3Text.add("2500-5000");
        
        // jRadioButton4Text
        jRadioButton4Text.add("NULL");
        jRadioButton4Text.add(">35");
        jRadioButton4Text.add("Graduate School");
        jRadioButton4Text.add("Unemployed");
        jRadioButton4Text.add(">6");
        jRadioButton4Text.add(">5000");
        
        
            
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Suggestion Questions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 12))); // NOI18N

        jLabel1.setText("What is your sex?");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Male");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Female");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("jRadioButton3");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("jRadioButton4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4))
                    .addComponent(jLabel1))
                .addContainerGap(153, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jRadioButton1, jRadioButton2, jRadioButton3, jRadioButton4});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Exit");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
      
      if (count == numberOfQuestions)
      {
          String minMotherboard = "";
          String minCpu = "";
          String minGpu = "";
          String minMemory = "";
          String minHdd = "";
          String minSsd = "";
          String minMonitor = "";
          String minKeyboard = "";
          String minMouse = "";
          String minOpticDrive = "";
          String minOperatingSystem = "";
          
          
          
          if (score > 0 && score <= 100 )    {
              
              
                  //motherboard
                minMotherboard = "SELECT model FROM motherboard AS m WHERE m.price = (SELECT MIN(price) FROM motherboard)";
                Motherboard m = null;
                try{
                  //retrieve motherboard
                    ResultSet r = Helper.retrieve(minMotherboard);
                    if(r.next()){
                        minMotherboard = r.getString("model");
                    }
                    else{ 
                        JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    m = new Motherboard();
                    m.retrieveMotherboard(minMotherboard);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Motherboard does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                
                
                //cpu
                minCpu = "SELECT id FROM cpu AS c WHERE c.price = (SELECT MIN(price) FROM cpu AS c2, cpu_motherboard AS cm WHERE c2.id = cm.cpu_id AND motherboard_id =" + m.getId() + ")";
                
                //gpu
                minGpu = "SELECT id FROM graphicscard AS g WHERE g.price = (SELECT MIN(price) FROM graphicscardh AS g2, gpu_motherboard AS gm WHERE g2.id = gm.gpu_id AND motherboard_id =" + m.getId() + ")";
                
                //memory
                minMemory = "SELECT id FROM memory AS m WHERE m.price = (SELECT MIN(price) FROM memory AS m2, memory_motherboard AS mm WHERE m2.id = mm.memory_id AND motherboard_id =" + m.getId() + ")";
                
                //hdd
                minHdd = "SELECT id FROM hdd AS h WHERE h.price = (SELECT MIN(price) FROM hdd AS h2, hdd_motherboard AS hm WHERE h2.id = hm.hdd_id AND motherboard_id =" + m.getId() + ")";
                
                //ssd
                minSsd = "SELECT id FROM ssd AS s WHERE s.price = (SELECT MIN(price) FROM ssd AS s2, ssd_motherboard AS sm WHERE s2.id = sm.ssd_id AND motherboard_id =" + m.getId() + ")";
                
                // monitor
                minMonitor = "SELECT id FROM monitor AS m WHERE m.price = (SELECT MIN(price) FROM monitor)";
                
                //keyboard
                minKeyboard = "SELECT id FROM keyboard AS k WHERE k.price = (SELECT MIN(price) FROM keyboard)";
               
                //mouse
                minMouse = "SELECT id FROM mouse AS m WHERE m.price = (SELECT MIN(price) FROM mouse)";
                
                //optic drive
                minOpticDrive = "SELECT id FROM opticdrive AS o WHERE o.price = (SELECT MIN(price) FROM opticdrive)";
                
                //operating system
                minOperatingSystem = "SELECT id FROM operatingsystem AS o WHERE o.price = (SELECT MIN(price) FROM operatingsystem)";
                
          }
          else if (score > 100 && score <= 200 )    { //ALL AVERAGE
              //motherboard
                minMotherboard = "SELECT * FROM motherboard WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM motherboard m1, motherboard m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM motherboard))";
                Motherboard m = null;
                try{
                  //retrieve motherboard
                    ResultSet r = Helper.retrieve(minMotherboard);
                    if(r.next()){
                        minMotherboard = r.getString("model");
                    }
                    else{ 
                        JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    m = new Motherboard();
                    m.retrieveMotherboard(minMotherboard);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Motherboard does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                
                
                //cpu
                minCpu = "SELECT * FROM cpu WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from cpu as c1 where c1.id IN (select cpu_id from cpu_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from cpu as c1 where c1.id IN (select cpu_id from cpu_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from cpu as c1 where c1.id IN (select cpu_id from cpu_motherboard where motherboard_id =" + m.getId() + "))m4))";
                
                //gpu
                minGpu = "SELECT * FROM graphicscard WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from graphicscard as c1 where c1.id IN (select gpu_id from gpu_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from graphicscard as c1 where c1.id IN (select gpu_id from gpu_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from graphicscard as c1 where c1.id IN (select gpu_id from gpu_motherboard where motherboard_id =" + m.getId() + "))m4))";
                
                //memory
                minMemory = "SELECT * FROM memory WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from memory as c1 where c1.id IN (select memory_id from memory_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from memory as c1 where c1.id IN (select memory_id from memory_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from memory as c1 where c1.id IN (select memory_id from memory_motherboard where motherboard_id =" + m.getId() + "))m4))";
                //hdd
                minHdd = "SELECT * FROM hdd WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from hdd as c1 where c1.id IN (select hdd_id from hdd_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from hdd as c1 where c1.id IN (select hdd_id from hdd_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from hdd as c1 where c1.id IN (select hdd_id from hdd_motherboard where motherboard_id =" + m.getId() + "))m4))";
                //ssd
                minSsd = "SELECT * FROM ssd WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from ssd as c1 where c1.id IN (select ssd_id from ssd_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from ssd as c1 where c1.id IN (select ssd_id from ssd_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from ssd as c1 where c1.id IN (select ssd_id from ssd_motherboard where motherboard_id =" + m.getId() + "))m4))";
                // monitor
                minMonitor = "SELECT * FROM monitor WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM monitor m1, monitor m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM monitor))";
                
                //keyboard
                minKeyboard = "SELECT * FROM keyboard WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM keyboard m1, keyboard m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM keyboard))";
               
                //mouse
                minMouse = "SELECT * FROM mouse WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM mouse m1, mouse m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM mouse))";
                
                //optic drive
                minOpticDrive = "SELECT * FROM opticdrive WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM opticdrive m1, opticdrive m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM opticdrive))";
                
                //operating system
                minOperatingSystem = "SELECT * FROM operatingsystem WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM operatingsystem m1, operatingsystem m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM operatingsystem))";
          }
          
          
          else if (score > 200 && score <= 300 )    { //EXPENSIVE GPU AVERAGE CPU
              
              //gpu
                minGpu = "SELECT id FROM graphicscard AS g WHERE g.price = (SELECT MAX(price) FROM graphicscard)";
                
                GraphicsCard g = null;
                try{
                  //retrieve motherboard
                    ResultSet r = Helper.retrieve(minGpu);
                    int minG = 0;
                    if(r.next()){
                        minG = r.getInt("id");
                    }
                    else{ 
                        JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    g = new GraphicsCard();
                    g.retrieveGraphicsCard(minG);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Graphics Card does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                //motherboard
                minMotherboard = "SELECT * FROM motherboard WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from motherboard as c1 where c1.id IN (select motherboard_id from gpu_motherboard where gpu_id =" + g.getId() + ")) m1,"
                        + " (select * from cpu as c1 where c1.id IN (select motherboard_id from gpu_motherboard where gpu_id =" + g.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from motherboard as c1 where c1.id IN (select motherboard_id from gpu_motherboard where gpu_id =" + g.getId() + "))m4))";
                
                Motherboard m = null;
                try{
                  //retrieve motherboard
                    ResultSet r = Helper.retrieve(minMotherboard);
                    if(r.next()){
                        minMotherboard = r.getString("model");
                    }
                    else{ 
                        JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    m = new Motherboard();
                    m.retrieveMotherboard(minMotherboard);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Motherboard does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                //cpu
                minCpu = "SELECT * FROM cpu WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from cpu as c1 where c1.id IN (select cpu_id from cpu_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from cpu as c1 where c1.id IN (select cpu_id from cpu_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from cpu as c1 where c1.id IN (select cpu_id from cpu_motherboard where motherboard_id =" + m.getId() + "))m4))";
                
                 //memory
                minMemory = "SELECT * FROM memory WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from memory as c1 where c1.id IN (select memory_id from memory_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from memory as c1 where c1.id IN (select memory_id from memory_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from memory as c1 where c1.id IN (select memory_id from memory_motherboard where motherboard_id =" + m.getId() + "))m4))";
                //hdd
                minHdd = "SELECT * FROM hdd WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from hdd as c1 where c1.id IN (select hdd_id from hdd_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from hdd as c1 where c1.id IN (select hdd_id from hdd_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from hdd as c1 where c1.id IN (select hdd_id from hdd_motherboard where motherboard_id =" + m.getId() + "))m4))";
                //ssd
                minSsd = "SELECT * FROM ssd WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM"
                        + " (select * from ssd as c1 where c1.id IN (select ssd_id from ssd_motherboard where motherboard_id =" + m.getId() + ")) m1,"
                        + " (select * from ssd as c1 where c1.id IN (select ssd_id from ssd_motherboard where motherboard_id =" + m.getId() + ")) m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM "
                        + "(select * from ssd as c1 where c1.id IN (select ssd_id from ssd_motherboard where motherboard_id =" + m.getId() + "))m4))";
                // monitor
                minMonitor = "SELECT * FROM monitor WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM monitor m1, monitor m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM monitor))";
                
                //keyboard
                minKeyboard = "SELECT * FROM keyboard WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM keyboard m1, keyboard m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM keyboard))";
               
                //mouse
                minMouse = "SELECT * FROM mouse WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM mouse m1, mouse m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM mouse))";
                
                //optic drive
                minOpticDrive = "SELECT * FROM opticdrive WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM opticdrive m1, opticdrive m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM opticdrive))";
                
                //operating system
                minOperatingSystem = "SELECT * FROM operatingsystem WHERE price =(SELECT price FROM (SELECT m1.price, COUNT(m1.price) Rank FROM operatingsystem m1, operatingsystem m2 "
                        + "WHERE m1.price < m2.price OR (m1.price=m2.price) "
                        + "GROUP BY m1.price ORDER BY m1.price DESC) m3 WHERE Rank = (SELECT (COUNT(*)+1)/2 FROM operatingsystem))";
          }
          else { //ALL EXPENSIVE
               //motherboard
                minMotherboard = "SELECT model FROM motherboard AS m WHERE m.price = (SELECT MAX(price) FROM motherboard)";
                Motherboard m = null;
                try{
                  //retrieve motherboard
                    ResultSet r = Helper.retrieve(minMotherboard);
                    if(r.next()){
                        minMotherboard = r.getString("model");
                    }
                    else{ 
                        JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    m = new Motherboard();
                    m.retrieveMotherboard(minMotherboard);
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Motherboard does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                
                
                //cpu
                minCpu = "SELECT id FROM cpu AS c WHERE c.price = (SELECT MAX(price) FROM cpu AS c2, cpu_motherboard AS cm WHERE c2.id = cm.cpu_id AND motherboard_id =" + m.getId() + ")";
                
                //gpu
                minGpu = "SELECT id FROM graphicscard AS g WHERE g.price = (SELECT MAX(price) FROM graphicscardh AS g2, gpu_motherboard AS gm WHERE g2.id = gm.gpu_id AND motherboard_id =" + m.getId() + ")";
                
                //memory
                minMemory = "SELECT id FROM memory AS m WHERE m.price = (SELECT MAX(price) FROM memory AS m2, memory_motherboard AS mm WHERE m2.id = mm.memory_id AND motherboard_id =" + m.getId() + ")";
                
                //hdd
                minHdd = "SELECT id FROM hdd AS h WHERE h.price = (SELECT MAX(price) FROM hdd AS h2, hdd_motherboard AS hm WHERE h2.id = hm.hdd_id AND motherboard_id =" + m.getId() + ")";
                
                //ssd
                minSsd = "SELECT id FROM ssd AS s WHERE s.price = (SELECT MAX(price) FROM ssd AS s2, ssd_motherboard AS sm WHERE s2.id = sm.ssd_id AND motherboard_id =" + m.getId() + ")";
                
                // monitor
                minMonitor = "SELECT id FROM monitor AS m WHERE m.price = (SELECT MAX(price) FROM monitor)";
                
                //keyboard
                minKeyboard = "SELECT id FROM keyboard AS k WHERE k.price = (SELECT MAX(price) FROM keyboard)";
               
                //mouse
                minMouse = "SELECT id FROM mouse AS m WHERE m.price = (SELECT MAX(price) FROM mouse)";
                
                //optic drive
                minOpticDrive = "SELECT id FROM opticdrive AS o WHERE o.price = (SELECT MAX(price) FROM opticdrive)";
                
                //operating system
                minOperatingSystem = "SELECT id FROM operatingsystem AS o WHERE o.price = (SELECT MAX(price) FROM operatingsystem)";
          }
          
          SuggestionResultWindow resultWindow = new SuggestionResultWindow();
              
              try{
                  //retrieve motherboard
                ResultSet r = Helper.retrieve(minMotherboard);
                if(r.next()){
                    minMotherboard = r.getString("model");
                }
                else{ 
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

                Motherboard m = new Motherboard();
                m.retrieveMotherboard(minMotherboard);
                
                //retrieve cpu
                
                r = Helper.retrieve(minCpu);
                
                int minC = 0;
                
                if(r.next())
                    minC = r.getInt("id");
                else{
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                Cpu c = new Cpu();
                c.retrieveCpu(minC);
                
                //retrieve gpu
                
                r = Helper.retrieve(minGpu);
                
                int minG = 0;
                
                if(r.next())
                    minG = r.getInt("id");
                else{
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                GraphicsCard g = new GraphicsCard();
                g.retrieveGraphicsCard(minG);
                
                //retrieve memory
                
                r = Helper.retrieve(minMemory);
                
                int minM = 0;
                
                if(r.next())
                    minM = r.getInt("id");
                else{
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                Memory mem = new Memory();
                mem.retrieveMemory(minM);
                
                //retrieve hdd
                
                r = Helper.retrieve(minHdd);
                
                int minH = 0;
                
                if(r.next())
                    minH = r.getInt("id");
                else{
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                Hdd h = new Hdd();
                h.retrieveHdd(minH);
                
                //retrieve ssd
                
                r = Helper.retrieve(minSsd);
                
                int minS = 0;
                
                if(r.next())
                    minS = r.getInt("id");
                else{
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                Ssd s = new Ssd();
                s.retrieveSsd(minS);
                
                //retrieve monitor
                
                r = Helper.retrieve(minMonitor);
                int minMon = 0;
                if(r.next()){
                    minMon = r.getInt("id");
                }
                else{ 
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

                Monitor mon = new Monitor();
                mon.retrieveMonitor(minMon);
                
                //keyboard
                
                r = Helper.retrieve(minKeyboard);
                int minKey = 0;
                if(r.next()){
                    minKey = r.getInt("id");
                }
                else{ 
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

                Keyboard key = new Keyboard();
                key.retrieveKeyboard(minKey);
                
                
                //mouse
                
                r = Helper.retrieve(minMouse);
                int minMou = 0;
                if(r.next()){
                    minMou = r.getInt("id");
                }
                else{ 
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

                Mouse mou = new Mouse();
                mou.retrieveMouse(minMou);
                
                
                
                //optic drive
                r = Helper.retrieve(minOpticDrive);
                int minOD = 0;
                if(r.next()){
                    minOD = r.getInt("id");
                }
                else{ 
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

                OpticDrive od = new OpticDrive();
                od.retrieveOpticDrive(minOD);
                
                
                //operating system
                
                r = Helper.retrieve(minOperatingSystem);
                int minOS = 0;
                if(r.next()){
                    minOS = r.getInt("id");
                }
                else{ 
                    JOptionPane.showMessageDialog(null, "Connection Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

                OperatingSystem os = new OperatingSystem();
                os.retrieveOperatingSystem(minOS);
                
                resultWindow.motherboard.add(m);
                resultWindow.cpu.add(c);
                resultWindow.gpu.add(g);
                resultWindow.hdd.add(h);
                resultWindow.keyboard.add(key);
                resultWindow.memory.add(mem);
                resultWindow.monitor.add(mon);
                resultWindow.mouse.add(mou);
                resultWindow.opticdrive.add(od);
                resultWindow.os.add(os);
                resultWindow.ssd.add(s);
                
                resultWindow.loadEntities();
                resultWindow.loadPrices();
                
              }
              catch(Exception e){
                  JOptionPane.showMessageDialog(null, "Motherboard does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
              }
              
              resultWindow.setVisible(true);
              
              this.dispose();
          
      }
      else
      {  
          jLabel1.setText(questions.get(count));
          
          jRadioButton1.setText(jRadioButton1Text.get(count));
          jRadioButton2.setText(jRadioButton2Text.get(count));
          
          // radioButton3 and radioButton4 can be NULL
          if (jRadioButton3Text.get(count).equals("NULL") ) 
              jRadioButton3.setVisible(false);
          else  {
              jRadioButton3.setVisible(true);
              jRadioButton3.setText(jRadioButton3Text.get(count));
          }
              
          
          if (jRadioButton4Text.get(count).equals("NULL") ) 
              jRadioButton4.setVisible(false);
          else  {
              jRadioButton4.setText(jRadioButton4Text.get(count));
              jRadioButton4.setVisible(true);
              
          }
          
          // puan tutma
          if (count == 1)    {
              
              if(jRadioButton1.isSelected()){
                  score += 50;
                }
              else{
                  score += 25;
              }
              
          }
          else if (count == 2) {
              
              if(jRadioButton1.isSelected()){
                  score += 40;
                }
              else if (jRadioButton2.isSelected())  {
                  score += 60;
              }
              else if (jRadioButton3.isSelected())  {
                  score += 40;
              }
              else  {
                  score += 20;
              }
              
          }
          
           else if (count == 3) {
              
              if(jRadioButton1.isSelected()){
                  score += 10;
                }
              else if (jRadioButton2.isSelected())  {
                  score += 20;
              }
              else if (jRadioButton3.isSelected())  {
                  score += 40;
              }
              else  {
                  score += 70;
              }
              
          }
          
          else if (count == 4) {
              
              if(jRadioButton1.isSelected()){
                  score += 80;
                }
              else if (jRadioButton2.isSelected())  {
                  score += 30;
              }
              else if (jRadioButton3.isSelected())  {
                  score += 60;
              }
              else  {
                  score += 10;
              }
              
          }
          
          else if (count == 5) {
              
              if(jRadioButton1.isSelected()){
                  score += 10;
                }
              else if (jRadioButton2.isSelected())  {
                  score += 40;
              }
              else if (jRadioButton3.isSelected())  {
                  score += 80;
              }
              else  {
                  score += 120;
              }
              
          }
          
          else {
              
              if(jRadioButton1.isSelected()){
                  score += 20;
                }
              else if (jRadioButton2.isSelected())  {
                  score += 40;
              }
              else if (jRadioButton3.isSelected())  {
                  score += 80;
              }
              else  {
                  score += 120;
              }
              
          }
            
              
          
          
          count++;
      }
         
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        new UserHelpMenu(null).setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new computerWizardUI().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SuggestionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SuggestionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SuggestionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SuggestionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SuggestionWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    // End of variables declaration//GEN-END:variables
}
